<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\StdPeriph_Demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\StdPeriph_Demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Tue Sep 19 20:13:26 2017
<BR><P>
<H3>Maximum Stack Usage =        256 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[10b]">USART_Send</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10a]">USART_Receive</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from dma_stm32f10x.o(i.DMA1_Channel1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from dma_stm32f10x.o(i.DMA1_Channel2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from dma_stm32f10x.o(i.DMA1_Channel3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from dma_stm32f10x.o(i.DMA1_Channel4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from dma_stm32f10x.o(i.DMA1_Channel5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from dma_stm32f10x.o(i.DMA1_Channel6_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from dma_stm32f10x.o(i.DMA1_Channel7_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from dma_stm32f10x.o(i.DMA2_Channel1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from dma_stm32f10x.o(i.DMA2_Channel2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from dma_stm32f10x.o(i.DMA2_Channel3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from dma_stm32f10x.o(i.DMA2_Channel4_5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from stm32f10x_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from stm32f10x_it.o(i.EXTI4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5b]">I2C1_Control</a> from i2c_stm32f10x.o(i.I2C1_Control) referenced from i2c_stm32f10x.o(.constdata)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from i2c_stm32f10x.o(i.I2C1_ER_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from i2c_stm32f10x.o(i.I2C1_EV_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5a]">I2C1_GetDataCount</a> from i2c_stm32f10x.o(i.I2C1_GetDataCount) referenced from i2c_stm32f10x.o(.constdata)
 <LI><a href="#[5c]">I2C1_GetStatus</a> from i2c_stm32f10x.o(i.I2C1_GetStatus) referenced from i2c_stm32f10x.o(.constdata)
 <LI><a href="#[53]">I2C1_Initialize</a> from i2c_stm32f10x.o(i.I2C1_Initialize) referenced from i2c_stm32f10x.o(.constdata)
 <LI><a href="#[57]">I2C1_MasterReceive</a> from i2c_stm32f10x.o(i.I2C1_MasterReceive) referenced from i2c_stm32f10x.o(.constdata)
 <LI><a href="#[56]">I2C1_MasterTransmit</a> from i2c_stm32f10x.o(i.I2C1_MasterTransmit) referenced from i2c_stm32f10x.o(.constdata)
 <LI><a href="#[55]">I2C1_PowerControl</a> from i2c_stm32f10x.o(i.I2C1_PowerControl) referenced from i2c_stm32f10x.o(.constdata)
 <LI><a href="#[59]">I2C1_SlaveReceive</a> from i2c_stm32f10x.o(i.I2C1_SlaveReceive) referenced from i2c_stm32f10x.o(.constdata)
 <LI><a href="#[58]">I2C1_SlaveTransmit</a> from i2c_stm32f10x.o(i.I2C1_SlaveTransmit) referenced from i2c_stm32f10x.o(.constdata)
 <LI><a href="#[54]">I2C1_Uninitialize</a> from i2c_stm32f10x.o(i.I2C1_Uninitialize) referenced from i2c_stm32f10x.o(.constdata)
 <LI><a href="#[65]">I2C2_Control</a> from i2c_stm32f10x.o(i.I2C2_Control) referenced from i2c_stm32f10x.o(.constdata)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from i2c_stm32f10x.o(i.I2C2_ER_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from i2c_stm32f10x.o(i.I2C2_EV_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[64]">I2C2_GetDataCount</a> from i2c_stm32f10x.o(i.I2C2_GetDataCount) referenced from i2c_stm32f10x.o(.constdata)
 <LI><a href="#[66]">I2C2_GetStatus</a> from i2c_stm32f10x.o(i.I2C2_GetStatus) referenced from i2c_stm32f10x.o(.constdata)
 <LI><a href="#[5d]">I2C2_Initialize</a> from i2c_stm32f10x.o(i.I2C2_Initialize) referenced from i2c_stm32f10x.o(.constdata)
 <LI><a href="#[61]">I2C2_MasterReceive</a> from i2c_stm32f10x.o(i.I2C2_MasterReceive) referenced from i2c_stm32f10x.o(.constdata)
 <LI><a href="#[60]">I2C2_MasterTransmit</a> from i2c_stm32f10x.o(i.I2C2_MasterTransmit) referenced from i2c_stm32f10x.o(.constdata)
 <LI><a href="#[5f]">I2C2_PowerControl</a> from i2c_stm32f10x.o(i.I2C2_PowerControl) referenced from i2c_stm32f10x.o(.constdata)
 <LI><a href="#[63]">I2C2_SlaveReceive</a> from i2c_stm32f10x.o(i.I2C2_SlaveReceive) referenced from i2c_stm32f10x.o(.constdata)
 <LI><a href="#[62]">I2C2_SlaveTransmit</a> from i2c_stm32f10x.o(i.I2C2_SlaveTransmit) referenced from i2c_stm32f10x.o(.constdata)
 <LI><a href="#[5e]">I2C2_Uninitialize</a> from i2c_stm32f10x.o(i.I2C2_Uninitialize) referenced from i2c_stm32f10x.o(.constdata)
 <LI><a href="#[52]">I2CX_GetCapabilities</a> from i2c_stm32f10x.o(i.I2CX_GetCapabilities) referenced 2 times from i2c_stm32f10x.o(.constdata)
 <LI><a href="#[51]">I2CX_GetVersion</a> from i2c_stm32f10x.o(i.I2CX_GetVersion) referenced 2 times from i2c_stm32f10x.o(.constdata)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[70]">SPI1_Control</a> from spi_stm32f10x.o(i.SPI1_Control) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[6f]">SPI1_GetDataCount</a> from spi_stm32f10x.o(i.SPI1_GetDataCount) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[71]">SPI1_GetStatus</a> from spi_stm32f10x.o(i.SPI1_GetStatus) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from spi_stm32f10x.o(i.SPI1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[69]">SPI1_Initialize</a> from spi_stm32f10x.o(i.SPI1_Initialize) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[6b]">SPI1_PowerControl</a> from spi_stm32f10x.o(i.SPI1_PowerControl) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[6d]">SPI1_Receive</a> from spi_stm32f10x.o(i.SPI1_Receive) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[6c]">SPI1_Send</a> from spi_stm32f10x.o(i.SPI1_Send) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[6e]">SPI1_Transfer</a> from spi_stm32f10x.o(i.SPI1_Transfer) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[6a]">SPI1_Uninitialize</a> from spi_stm32f10x.o(i.SPI1_Uninitialize) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[79]">SPI2_Control</a> from spi_stm32f10x.o(i.SPI2_Control) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[78]">SPI2_GetDataCount</a> from spi_stm32f10x.o(i.SPI2_GetDataCount) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[7a]">SPI2_GetStatus</a> from spi_stm32f10x.o(i.SPI2_GetStatus) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from spi_stm32f10x.o(i.SPI2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[72]">SPI2_Initialize</a> from spi_stm32f10x.o(i.SPI2_Initialize) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[74]">SPI2_PowerControl</a> from spi_stm32f10x.o(i.SPI2_PowerControl) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[76]">SPI2_Receive</a> from spi_stm32f10x.o(i.SPI2_Receive) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[75]">SPI2_Send</a> from spi_stm32f10x.o(i.SPI2_Send) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[77]">SPI2_Transfer</a> from spi_stm32f10x.o(i.SPI2_Transfer) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[73]">SPI2_Uninitialize</a> from spi_stm32f10x.o(i.SPI2_Uninitialize) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[82]">SPI3_Control</a> from spi_stm32f10x.o(i.SPI3_Control) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[81]">SPI3_GetDataCount</a> from spi_stm32f10x.o(i.SPI3_GetDataCount) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[83]">SPI3_GetStatus</a> from spi_stm32f10x.o(i.SPI3_GetStatus) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from spi_stm32f10x.o(i.SPI3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7b]">SPI3_Initialize</a> from spi_stm32f10x.o(i.SPI3_Initialize) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[7d]">SPI3_PowerControl</a> from spi_stm32f10x.o(i.SPI3_PowerControl) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[7f]">SPI3_Receive</a> from spi_stm32f10x.o(i.SPI3_Receive) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[7e]">SPI3_Send</a> from spi_stm32f10x.o(i.SPI3_Send) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[80]">SPI3_Transfer</a> from spi_stm32f10x.o(i.SPI3_Transfer) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[7c]">SPI3_Uninitialize</a> from spi_stm32f10x.o(i.SPI3_Uninitialize) referenced from spi_stm32f10x.o(.constdata)
 <LI><a href="#[68]">SPIX_GetCapabilities</a> from spi_stm32f10x.o(i.SPIX_GetCapabilities) referenced 3 times from spi_stm32f10x.o(.constdata)
 <LI><a href="#[67]">SPIX_GetVersion</a> from spi_stm32f10x.o(i.SPIX_GetVersion) referenced 3 times from spi_stm32f10x.o(.constdata)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from cmsis_os2.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from usart_stm32f10x.o(i.UART4_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from usart_stm32f10x.o(i.UART5_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8e]">USART2_Control</a> from usart_stm32f10x.o(i.USART2_Control) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[85]">USART2_GetCapabilities</a> from usart_stm32f10x.o(i.USART2_GetCapabilities) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[91]">USART2_GetModemStatus</a> from usart_stm32f10x.o(i.USART2_GetModemStatus) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[8d]">USART2_GetRxCount</a> from usart_stm32f10x.o(i.USART2_GetRxCount) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[8f]">USART2_GetStatus</a> from usart_stm32f10x.o(i.USART2_GetStatus) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[8c]">USART2_GetTxCount</a> from usart_stm32f10x.o(i.USART2_GetTxCount) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[30]">USART2_IRQHandler</a> from usart_stm32f10x.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[86]">USART2_Initialize</a> from usart_stm32f10x.o(i.USART2_Initialize) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[88]">USART2_PowerControl</a> from usart_stm32f10x.o(i.USART2_PowerControl) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[8a]">USART2_Receive</a> from usart_stm32f10x.o(i.USART2_Receive) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[89]">USART2_Send</a> from usart_stm32f10x.o(i.USART2_Send) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[90]">USART2_SetModemControl</a> from usart_stm32f10x.o(i.USART2_SetModemControl) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[8b]">USART2_Transfer</a> from usart_stm32f10x.o(i.USART2_Transfer) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[87]">USART2_Uninitialize</a> from usart_stm32f10x.o(i.USART2_Uninitialize) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[9b]">USART3_Control</a> from usart_stm32f10x.o(i.USART3_Control) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[92]">USART3_GetCapabilities</a> from usart_stm32f10x.o(i.USART3_GetCapabilities) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[9e]">USART3_GetModemStatus</a> from usart_stm32f10x.o(i.USART3_GetModemStatus) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[9a]">USART3_GetRxCount</a> from usart_stm32f10x.o(i.USART3_GetRxCount) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[9c]">USART3_GetStatus</a> from usart_stm32f10x.o(i.USART3_GetStatus) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[99]">USART3_GetTxCount</a> from usart_stm32f10x.o(i.USART3_GetTxCount) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[31]">USART3_IRQHandler</a> from usart_stm32f10x.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[93]">USART3_Initialize</a> from usart_stm32f10x.o(i.USART3_Initialize) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[95]">USART3_PowerControl</a> from usart_stm32f10x.o(i.USART3_PowerControl) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[97]">USART3_Receive</a> from usart_stm32f10x.o(i.USART3_Receive) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[96]">USART3_Send</a> from usart_stm32f10x.o(i.USART3_Send) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[9d]">USART3_SetModemControl</a> from usart_stm32f10x.o(i.USART3_SetModemControl) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[98]">USART3_Transfer</a> from usart_stm32f10x.o(i.USART3_Transfer) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[94]">USART3_Uninitialize</a> from usart_stm32f10x.o(i.USART3_Uninitialize) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[a8]">USART4_Control</a> from usart_stm32f10x.o(i.USART4_Control) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[9f]">USART4_GetCapabilities</a> from usart_stm32f10x.o(i.USART4_GetCapabilities) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[ab]">USART4_GetModemStatus</a> from usart_stm32f10x.o(i.USART4_GetModemStatus) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[a7]">USART4_GetRxCount</a> from usart_stm32f10x.o(i.USART4_GetRxCount) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[a9]">USART4_GetStatus</a> from usart_stm32f10x.o(i.USART4_GetStatus) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[a6]">USART4_GetTxCount</a> from usart_stm32f10x.o(i.USART4_GetTxCount) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[a0]">USART4_Initialize</a> from usart_stm32f10x.o(i.USART4_Initialize) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[a2]">USART4_PowerControl</a> from usart_stm32f10x.o(i.USART4_PowerControl) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[a4]">USART4_Receive</a> from usart_stm32f10x.o(i.USART4_Receive) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[a3]">USART4_Send</a> from usart_stm32f10x.o(i.USART4_Send) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[aa]">USART4_SetModemControl</a> from usart_stm32f10x.o(i.USART4_SetModemControl) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[a5]">USART4_Transfer</a> from usart_stm32f10x.o(i.USART4_Transfer) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[a1]">USART4_Uninitialize</a> from usart_stm32f10x.o(i.USART4_Uninitialize) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[b5]">USART5_Control</a> from usart_stm32f10x.o(i.USART5_Control) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[ac]">USART5_GetCapabilities</a> from usart_stm32f10x.o(i.USART5_GetCapabilities) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[b8]">USART5_GetModemStatus</a> from usart_stm32f10x.o(i.USART5_GetModemStatus) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[b4]">USART5_GetRxCount</a> from usart_stm32f10x.o(i.USART5_GetRxCount) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[b6]">USART5_GetStatus</a> from usart_stm32f10x.o(i.USART5_GetStatus) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[b3]">USART5_GetTxCount</a> from usart_stm32f10x.o(i.USART5_GetTxCount) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[ad]">USART5_Initialize</a> from usart_stm32f10x.o(i.USART5_Initialize) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[af]">USART5_PowerControl</a> from usart_stm32f10x.o(i.USART5_PowerControl) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[b1]">USART5_Receive</a> from usart_stm32f10x.o(i.USART5_Receive) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[b0]">USART5_Send</a> from usart_stm32f10x.o(i.USART5_Send) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[b7]">USART5_SetModemControl</a> from usart_stm32f10x.o(i.USART5_SetModemControl) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[b2]">USART5_Transfer</a> from usart_stm32f10x.o(i.USART5_Transfer) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[ae]">USART5_Uninitialize</a> from usart_stm32f10x.o(i.USART5_Uninitialize) referenced from usart_stm32f10x.o(.constdata)
 <LI><a href="#[84]">USARTx_GetVersion</a> from usart_stm32f10x.o(i.USARTx_GetVersion) referenced 4 times from usart_stm32f10x.o(.constdata)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[49]">fputc</a> from usart1.o(i.fputc) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4a]">myUSART_callback</a> from main.o(i.myUSART_callback) referenced from main.o(i.main)
 <LI><a href="#[4f]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[4e]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[50]">prvTimerTask</a> from timers.o(i.prvTimerTask) referenced from timers.o(i.xTimerCreateTimerTask)
 <LI><a href="#[b9]">shell_cmd_help</a> from cmd_parser.o(i.shell_cmd_help) referenced 2 times from cmd_parser.o(.data)
 <LI><a href="#[ba]">shell_cmd_reset</a> from cmd_parser.o(i.shell_cmd_reset) referenced from cmd_parser.o(.data)
 <LI><a href="#[4c]">vTaskDebugPort</a> from main.o(i.vTaskDebugPort) referenced from main.o(i.main)
 <LI><a href="#[4d]">vTaskEXTILed</a> from main.o(i.vTaskEXTILed) referenced from main.o(i.main)
 <LI><a href="#[4b]">vTaskLedRed</a> from main.o(i.vTaskLedRed) referenced from main.o(i.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[173]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[bb]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[c4]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[174]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[175]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[176]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[177]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[178]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16a]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[179]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[143]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>

<P><STRONG><a name="[17a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[17b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[17c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd_parser_char
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;myUSART_callback
</UL>

<P><STRONG><a name="[eb]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
</UL>

<P><STRONG><a name="[17e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[11b]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_process
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd_parser_char
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEXTILed
</UL>

<P><STRONG><a name="[15f]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_process
</UL>

<P><STRONG><a name="[161]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEXTILed
</UL>

<P><STRONG><a name="[15e]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_process
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bc]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[17f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[c3]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[180]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[181]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>DMA1_Channel1_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA1_Channel1_Event))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dma_stm32f10x.o(i.DMA1_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>DMA1_Channel2_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA1_Channel2_Event))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(i.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>DMA1_Channel3_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA1_Channel3_Event))
<BR><BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(i.DMA1_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>DMA1_Channel4_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA1_Channel4_Event))
<BR><BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
</UL>

<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(i.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>DMA1_Channel5_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA1_Channel5_Event))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_IRQHandler
</UL>

<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(i.DMA1_Channel5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel5_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>DMA1_Channel6_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA1_Channel6_Event))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_IRQHandler
</UL>

<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(i.DMA1_Channel6_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel6_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel6_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>DMA1_Channel7_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA1_Channel7_Event))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
</UL>

<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(i.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA1_Channel7_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[cc]"></a>DMA2_Channel1_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA2_Channel1_Event))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel1_IRQHandler
</UL>

<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dma_stm32f10x.o(i.DMA2_Channel1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel1_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[cd]"></a>DMA2_Channel2_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA2_Channel2_Event))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dma_stm32f10x.o(i.DMA2_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel2_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ce]"></a>DMA2_Channel3_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA2_Channel3_Event))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dma_stm32f10x.o(i.DMA2_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel3_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, dma_stm32f10x.o(i.DMA2_Channel4_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA2_Channel4_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel5_Event
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_Event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[cf]"></a>DMA2_Channel4_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA2_Channel4_Event))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>DMA2_Channel5_Event</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma_stm32f10x.o(i.DMA2_Channel5_Event))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Channel4_5_IRQHandler
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[162]"></a>Delay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, delay.o(i.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskLedRed
</UL>

<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EXTI0_IRQHandler &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = EXTI4_IRQHandler &rArr; osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>EXTI_Config</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, exti.o(i.EXTI_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = EXTI_Config &rArr; EXTI_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_NVIC_Configuration
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d7]"></a>EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
</UL>

<P><STRONG><a name="[ea]"></a>GPIO_AFConfigure</STRONG> (Thumb, 146 bytes, Stack size 12 bytes, gpio_stm32f10x.o(i.GPIO_AFConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_AFConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Uninitialize
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Uninitialize
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
</UL>

<P><STRONG><a name="[d6]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
</UL>

<P><STRONG><a name="[db]"></a>GPIO_GetPortClockState</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, gpio_stm32f10x.o(i.GPIO_GetPortClockState))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
</UL>

<P><STRONG><a name="[d5]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
</UL>

<P><STRONG><a name="[da]"></a>GPIO_PinConfigure</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, gpio_stm32f10x.o(i.GPIO_PinConfigure))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClock
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPortClockState
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Uninitialize
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Uninitialize
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>

<P><STRONG><a name="[dc]"></a>GPIO_PortClock</STRONG> (Thumb, 284 bytes, Stack size 0 bytes, gpio_stm32f10x.o(i.GPIO_PortClock))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
</UL>

<P><STRONG><a name="[11d]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadOutputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_toggle
</UL>

<P><STRONG><a name="[11e]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_toggle
</UL>

<P><STRONG><a name="[11f]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_toggle
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_stm32f10x.o(i.I2C1_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C1_ER_IRQHandler &rArr; I2C_ER_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_stm32f10x.o(i.I2C1_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C1_EV_IRQHandler &rArr; I2C_EV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_stm32f10x.o(i.I2C2_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C2_ER_IRQHandler &rArr; I2C_ER_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_stm32f10x.o(i.I2C2_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C2_EV_IRQHandler &rArr; I2C_EV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_EV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ef]"></a>LED_GPIO_Config</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, led.o(i.LED_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_GPIO_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_NVIC_Configuration
</UL>

<P><STRONG><a name="[d4]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
</UL>

<P><STRONG><a name="[10f]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI1_IRQHandler &rArr; SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI2_IRQHandler &rArr; SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI3_IRQHandler &rArr; SPI_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f3]"></a>SPI_IRQHandler</STRONG> (Thumb, 520 bytes, Stack size 24 bytes, spi_stm32f10x.o(i.SPI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_IRQHandler
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_IRQHandler
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os2.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e9]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
</UL>

<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART4_IRQHandler &rArr; USART_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.UART5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART5_IRQHandler &rArr; USART_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ff]"></a>USART1_Config</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, usart1.o(i.USART1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = USART1_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART2_IRQHandler &rArr; USART_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART3_IRQHandler &rArr; USART_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[101]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[114]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[fe]"></a>USART_IRQHandler</STRONG> (Thumb, 624 bytes, Stack size 24 bytes, usart_stm32f10x.o(i.USART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART5_IRQHandler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[116]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>

<P><STRONG><a name="[117]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[111]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[182]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[11a]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_process
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_cmd_help
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd_parser_char
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEXTILed
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDebugPort
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[183]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[184]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[185]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[113]"></a>fgetc</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, usart1.o(i.fgetc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = fgetc &rArr; fputc &rArr; led_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>

<P><STRONG><a name="[49]"></a>fputc</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usart1.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; led_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[118]"></a>get_cmd_parser_char</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, cmd_parser.o(i.get_cmd_parser_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = get_cmd_parser_char &rArr; getc &rArr; fgetc &rArr; fputc &rArr; led_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_process
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getc
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDebugPort
</UL>

<P><STRONG><a name="[119]"></a>getc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, getc.o(i.getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = getc &rArr; fgetc &rArr; fputc &rArr; led_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd_parser_char
</UL>

<P><STRONG><a name="[115]"></a>led_toggle</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, led.o(i.led_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskLedRed
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEXTILed
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDebugPort
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = main &rArr; osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_GPIO_Config
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[4a]"></a>myUSART_callback</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, main.o(i.myUSART_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = myUSART_callback
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[120]"></a>osKernelInitialize</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, cmsis_os2.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelInitialize
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[123]"></a>osKernelStart</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, cmsis_os2.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osKernelStart &rArr; vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>osSemaphoreAcquire</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, cmsis_os2.o(i.osSemaphoreAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osSemaphoreAcquire &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskEXTILed
</UL>

<P><STRONG><a name="[122]"></a>osSemaphoreNew</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, cmsis_os2.o(i.osSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osSemaphoreNew &rArr; xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d1]"></a>osSemaphoreRelease</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, cmsis_os2.o(i.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osSemaphoreRelease &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[121]"></a>osThreadNew</STRONG> (Thumb, 216 bytes, Stack size 56 bytes, cmsis_os2.o(i.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = osThreadNew &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_PRIMASK
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_IPSR
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__get_BASEPRI
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15b]"></a>pvPortMalloc</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[16c]"></a>pvTaskIncrementMutexHeldCount</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.pvTaskIncrementMutexHeldCount))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[14b]"></a>pxPortInitialiseStack</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[b9]"></a>shell_cmd_help</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cmd_parser.o(i.shell_cmd_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = shell_cmd_help &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd_parser.o(.data)
</UL>
<P><STRONG><a name="[ba]"></a>shell_cmd_reset</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, cmd_parser.o(i.shell_cmd_reset))
<BR>[Address Reference Count : 1]<UL><LI> cmd_parser.o(.data)
</UL>
<P><STRONG><a name="[11c]"></a>shell_process</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, cmd_parser.o(i.shell_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = shell_process &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd_parser_char
</UL>

<P><STRONG><a name="[135]"></a>uxListRemove</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[165]"></a>vApplicationGetIdleTaskMemory</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetIdleTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[171]"></a>vApplicationGetTimerTaskMemory</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationGetTimerTaskMemory))
<BR><BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[168]"></a>vApplicationStackOverflowHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cmsis_os2.o(i.vApplicationStackOverflowHook))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>

<P><STRONG><a name="[13d]"></a>vListInitialise</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[14a]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[137]"></a>vListInsert</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>

<P><STRONG><a name="[136]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[139]"></a>vPortEnterCritical</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[13b]"></a>vPortExitCritical</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[146]"></a>vPortFree</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueDelete
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[169]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[12e]"></a>vQueueDelete</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, queue.o(i.vQueueDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueDelete &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[154]"></a>vQueueWaitForMessageRestricted</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, queue.o(i.vQueueWaitForMessageRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vQueueWaitForMessageRestricted &rArr; vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[4c]"></a>vTaskDebugPort</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(i.vTaskDebugPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vTaskDebugPort &rArr; get_cmd_parser_char &rArr; getc &rArr; fgetc &rArr; fputc &rArr; led_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_toggle
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_cmd_parser_char
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[4d]"></a>vTaskEXTILed</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, main.o(i.vTaskEXTILed))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vTaskEXTILed &rArr; osSemaphoreAcquire &rArr; xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_toggle
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[4b]"></a>vTaskLedRed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(i.vTaskLedRed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskLedRed &rArr; led_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_toggle
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[15a]"></a>vTaskMissedYield</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tasks.o(i.vTaskMissedYield))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[163]"></a>vTaskPlaceOnEventList</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[160]"></a>vTaskPlaceOnEventListRestricted</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tasks.o(i.vTaskPlaceOnEventListRestricted))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vTaskPlaceOnEventListRestricted &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[164]"></a>vTaskPriorityInherit</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tasks.o(i.vTaskPriorityInherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskPriorityInherit
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[16d]"></a>vTaskSetTimeOutState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tasks.o(i.vTaskSetTimeOutState))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
</UL>

<P><STRONG><a name="[127]"></a>vTaskStartScheduler</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = vTaskStartScheduler &rArr; xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetIdleTaskMemory
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[13f]"></a>vTaskSuspendAll</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[bd]"></a>vTaskSwitchContext</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = vTaskSwitchContext
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationStackOverflowHook
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[167]"></a>xPortStartScheduler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[fd]"></a>xPortSysTickHandler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[130]"></a>xQueueCreateCountingSemaphore</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.xQueueCreateCountingSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphore &rArr; xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[12f]"></a>xQueueCreateCountingSemaphoreStatic</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, queue.o(i.xQueueCreateCountingSemaphoreStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = xQueueCreateCountingSemaphoreStatic &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>

<P><STRONG><a name="[12c]"></a>xQueueGenericCreate</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xQueueGenericCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphore
</UL>

<P><STRONG><a name="[12b]"></a>xQueueGenericCreateStatic</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, queue.o(i.xQueueGenericCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueCreateCountingSemaphoreStatic
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>

<P><STRONG><a name="[12a]"></a>xQueueGenericReceive</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericReceive &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPriorityInherit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvTaskIncrementMutexHeldCount
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueEmpty
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[148]"></a>xQueueGenericReset</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, queue.o(i.xQueueGenericReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewQueue
</UL>

<P><STRONG><a name="[12d]"></a>xQueueGenericSend</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, queue.o(i.xQueueGenericSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCheckForTimeOut
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIsQueueFull
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[16f]"></a>xQueueGenericSendFromISR</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, queue.o(i.xQueueGenericSendFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xQueueGenericSendFromISR &rArr; prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[131]"></a>xQueueGiveFromISR</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, queue.o(i.xQueueGiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xQueueGiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[129]"></a>xQueueReceiveFromISR</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, queue.o(i.xQueueReceiveFromISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xQueueReceiveFromISR &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataFromQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
</UL>

<P><STRONG><a name="[16e]"></a>xTaskCheckForTimeOut</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, tasks.o(i.xTaskCheckForTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskCheckForTimeOut
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSetTimeOutState
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[133]"></a>xTaskCreate</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[132]"></a>xTaskCreateStatic</STRONG> (Thumb, 78 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreateStatic))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[172]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
</UL>

<P><STRONG><a name="[155]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[16b]"></a>xTaskIncrementTick</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
</UL>

<P><STRONG><a name="[145]"></a>xTaskPriorityDisinherit</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.xTaskPriorityDisinherit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCopyDataToQueue
</UL>

<P><STRONG><a name="[159]"></a>xTaskRemoveFromEventList</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, tasks.o(i.xTaskRemoveFromEventList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGiveFromISR
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvUnlockQueue
</UL>

<P><STRONG><a name="[140]"></a>xTaskResumeAll</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[166]"></a>xTimerCreateTimerTask</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, timers.o(i.xTimerCreateTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = xTimerCreateTimerTask &rArr; xTaskCreateStatic &rArr; prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationGetTimerTaskMemory
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckForValidListAndQueue
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[150]"></a>xTimerGenericCommand</STRONG> (Thumb, 104 bytes, Stack size 48 bytes, timers.o(i.xTimerGenericCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d8]"></a>EXTI_NVIC_Configuration</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, exti.o(i.EXTI_NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI_NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Config
</UL>

<P><STRONG><a name="[126]"></a>__get_BASEPRI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os2.o(i.__get_BASEPRI))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[124]"></a>__get_IPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os2.o(i.__get_IPSR))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[125]"></a>__get_PRIMASK</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cmsis_os2.o(i.__get_PRIMASK))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreAcquire
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[5b]"></a>I2C1_Control</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_stm32f10x.o(i.I2C1_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C1_Control &rArr; I2C_Control &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>I2C1_GetDataCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_stm32f10x.o(i.I2C1_GetDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C1_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>I2C1_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2c_stm32f10x.o(i.I2C1_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C1_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>I2C1_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2c_stm32f10x.o(i.I2C1_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C1_Initialize &rArr; I2C_Initialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>I2C1_MasterReceive</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, i2c_stm32f10x.o(i.I2C1_MasterReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C1_MasterReceive &rArr; I2C_MasterReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>I2C1_MasterTransmit</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, i2c_stm32f10x.o(i.I2C1_MasterTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C1_MasterTransmit &rArr; I2C_MasterTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>I2C1_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2c_stm32f10x.o(i.I2C1_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C1_PowerControl &rArr; I2C_PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[59]"></a>I2C1_SlaveReceive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_stm32f10x.o(i.I2C1_SlaveReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C1_SlaveReceive &rArr; I2C_SlaveReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>I2C1_SlaveTransmit</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_stm32f10x.o(i.I2C1_SlaveTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C1_SlaveTransmit &rArr; I2C_SlaveTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>I2C1_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_stm32f10x.o(i.I2C1_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C1_Uninitialize &rArr; I2C_Uninitialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[65]"></a>I2C2_Control</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_stm32f10x.o(i.I2C2_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = I2C2_Control &rArr; I2C_Control &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>I2C2_GetDataCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_stm32f10x.o(i.I2C2_GetDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C2_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>I2C2_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, i2c_stm32f10x.o(i.I2C2_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C2_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>I2C2_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2c_stm32f10x.o(i.I2C2_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = I2C2_Initialize &rArr; I2C_Initialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>I2C2_MasterReceive</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, i2c_stm32f10x.o(i.I2C2_MasterReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C2_MasterReceive &rArr; I2C_MasterReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>I2C2_MasterTransmit</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, i2c_stm32f10x.o(i.I2C2_MasterTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C2_MasterTransmit &rArr; I2C_MasterTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>I2C2_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, i2c_stm32f10x.o(i.I2C2_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C2_PowerControl &rArr; I2C_PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>I2C2_SlaveReceive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_stm32f10x.o(i.I2C2_SlaveReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C2_SlaveReceive &rArr; I2C_SlaveReceive
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveReceive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>I2C2_SlaveTransmit</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, i2c_stm32f10x.o(i.I2C2_SlaveTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C2_SlaveTransmit &rArr; I2C_SlaveTransmit
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>I2C2_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_stm32f10x.o(i.I2C2_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C2_Uninitialize &rArr; I2C_Uninitialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>I2CX_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, i2c_stm32f10x.o(i.I2CX_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>I2CX_GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, i2c_stm32f10x.o(i.I2CX_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2CX_GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> i2c_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>I2C_Control</STRONG> (Thumb, 964 bytes, Stack size 48 bytes, i2c_stm32f10x.o(i.I2C_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_Control &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Control
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Control
</UL>

<P><STRONG><a name="[de]"></a>I2C_ER_IRQHandler</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, i2c_stm32f10x.o(i.I2C_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_ER_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_ER_IRQHandler
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_IRQHandler
</UL>

<P><STRONG><a name="[df]"></a>I2C_EV_IRQHandler</STRONG> (Thumb, 1420 bytes, Stack size 32 bytes, i2c_stm32f10x.o(i.I2C_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_EV_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_EV_IRQHandler
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[e0]"></a>I2C_GetDataCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c_stm32f10x.o(i.I2C_GetDataCount))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_GetDataCount
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_GetDataCount
</UL>

<P><STRONG><a name="[e1]"></a>I2C_GetStatus</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, i2c_stm32f10x.o(i.I2C_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_GetStatus
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_GetStatus
</UL>

<P><STRONG><a name="[e2]"></a>I2C_Initialize</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, i2c_stm32f10x.o(i.I2C_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_Initialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClock
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFConfigure
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Initialize
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Initialize
</UL>

<P><STRONG><a name="[e3]"></a>I2C_MasterReceive</STRONG> (Thumb, 226 bytes, Stack size 16 bytes, i2c_stm32f10x.o(i.I2C_MasterReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_MasterReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MasterReceive
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_MasterReceive
</UL>

<P><STRONG><a name="[e4]"></a>I2C_MasterTransmit</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, i2c_stm32f10x.o(i.I2C_MasterTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_MasterTransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_MasterTransmit
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_MasterTransmit
</UL>

<P><STRONG><a name="[e5]"></a>I2C_PowerControl</STRONG> (Thumb, 342 bytes, Stack size 16 bytes, i2c_stm32f10x.o(i.I2C_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_PowerControl
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_PowerControl
</UL>

<P><STRONG><a name="[e6]"></a>I2C_SlaveReceive</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, i2c_stm32f10x.o(i.I2C_SlaveReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_SlaveReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_SlaveReceive
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_SlaveReceive
</UL>

<P><STRONG><a name="[e7]"></a>I2C_SlaveTransmit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, i2c_stm32f10x.o(i.I2C_SlaveTransmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_SlaveTransmit
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_SlaveTransmit
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_SlaveTransmit
</UL>

<P><STRONG><a name="[e8]"></a>I2C_Uninitialize</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, i2c_stm32f10x.o(i.I2C_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_Uninitialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Uninitialize
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Uninitialize
</UL>

<P><STRONG><a name="[ed]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, i2c_stm32f10x.o(i.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PowerControl
</UL>

<P><STRONG><a name="[ec]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, i2c_stm32f10x.o(i.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PowerControl
</UL>

<P><STRONG><a name="[ee]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, i2c_stm32f10x.o(i.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PowerControl
</UL>

<P><STRONG><a name="[70]"></a>SPI1_Control</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f10x.o(i.SPI1_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI1_Control &rArr; SPI_Control &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>SPI1_GetDataCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI1_GetDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>SPI1_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI1_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI1_GetStatus &rArr; SPI_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>SPI1_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI1_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI1_Initialize &rArr; SPI_Initialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>SPI1_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI1_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI1_PowerControl &rArr; SPI_PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[6d]"></a>SPI1_Receive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f10x.o(i.SPI1_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI1_Receive &rArr; SPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[6c]"></a>SPI1_Send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f10x.o(i.SPI1_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI1_Send &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>SPI1_Transfer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, spi_stm32f10x.o(i.SPI1_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPI1_Transfer &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[6a]"></a>SPI1_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI1_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI1_Uninitialize &rArr; SPI_Uninitialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>SPI2_Control</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f10x.o(i.SPI2_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI2_Control &rArr; SPI_Control &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>SPI2_GetDataCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI2_GetDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI2_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>SPI2_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI2_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI2_GetStatus &rArr; SPI_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>SPI2_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI2_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI2_Initialize &rArr; SPI_Initialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>SPI2_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI2_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI2_PowerControl &rArr; SPI_PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[76]"></a>SPI2_Receive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f10x.o(i.SPI2_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI2_Receive &rArr; SPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>SPI2_Send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f10x.o(i.SPI2_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI2_Send &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>SPI2_Transfer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, spi_stm32f10x.o(i.SPI2_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPI2_Transfer &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>SPI2_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI2_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI2_Uninitialize &rArr; SPI_Uninitialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[82]"></a>SPI3_Control</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f10x.o(i.SPI3_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SPI3_Control &rArr; SPI_Control &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>SPI3_GetDataCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI3_GetDataCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI3_GetDataCount
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetDataCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>SPI3_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI3_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPI3_GetStatus &rArr; SPI_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>SPI3_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI3_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SPI3_Initialize &rArr; SPI_Initialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>SPI3_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI3_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI3_PowerControl &rArr; SPI_PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[7f]"></a>SPI3_Receive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f10x.o(i.SPI3_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI3_Receive &rArr; SPI_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>SPI3_Send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, spi_stm32f10x.o(i.SPI3_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI3_Send &rArr; SPI_Send
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>SPI3_Transfer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, spi_stm32f10x.o(i.SPI3_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPI3_Transfer &rArr; SPI_Transfer
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>SPI3_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI3_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI3_Uninitialize &rArr; SPI_Uninitialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[68]"></a>SPIX_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, spi_stm32f10x.o(i.SPIX_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[67]"></a>SPIX_GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPIX_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIX_GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> spi_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>SPI_Control</STRONG> (Thumb, 1072 bytes, Stack size 40 bytes, spi_stm32f10x.o(i.SPI_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SPI_Control &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClock
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Control
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Control
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Control
</UL>

<P><STRONG><a name="[f1]"></a>SPI_GetDataCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi_stm32f10x.o(i.SPI_GetDataCount))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_GetDataCount
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_GetDataCount
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_GetDataCount
</UL>

<P><STRONG><a name="[f2]"></a>SPI_GetStatus</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, spi_stm32f10x.o(i.SPI_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_GetStatus
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_GetStatus
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_GetStatus
</UL>

<P><STRONG><a name="[f4]"></a>SPI_Initialize</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, spi_stm32f10x.o(i.SPI_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_Initialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClock
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFConfigure
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Initialize
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Initialize
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Initialize
</UL>

<P><STRONG><a name="[fa]"></a>SPI_PeripheralReset</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, spi_stm32f10x.o(i.SPI_PeripheralReset))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PowerControl
</UL>

<P><STRONG><a name="[f5]"></a>SPI_PowerControl</STRONG> (Thumb, 380 bytes, Stack size 16 bytes, spi_stm32f10x.o(i.SPI_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_PeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_PowerControl
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_PowerControl
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_PowerControl
</UL>

<P><STRONG><a name="[f6]"></a>SPI_Receive</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Receive
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Receive
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Receive
</UL>

<P><STRONG><a name="[f7]"></a>SPI_Send</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Send
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Send
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Send
</UL>

<P><STRONG><a name="[f8]"></a>SPI_Transfer</STRONG> (Thumb, 112 bytes, Stack size 12 bytes, spi_stm32f10x.o(i.SPI_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Transfer
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Transfer
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Transfer
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Transfer
</UL>

<P><STRONG><a name="[f9]"></a>SPI_Uninitialize</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, spi_stm32f10x.o(i.SPI_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_Uninitialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI3_Uninitialize
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI2_Uninitialize
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Uninitialize
</UL>

<P><STRONG><a name="[8e]"></a>USART2_Control</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usart_stm32f10x.o(i.USART2_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART2_Control &rArr; USART_Control &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>USART2_GetCapabilities</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART2_GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_GetCapabilities
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetCapabilities
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>USART2_GetModemStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART2_GetModemStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART2_GetModemStatus &rArr; USART_GetModemStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetModemStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>USART2_GetRxCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART2_GetRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_GetRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetRxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>USART2_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART2_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART2_GetStatus &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>USART2_GetTxCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART2_GetTxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART2_GetTxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetTxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>USART2_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART2_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART2_Initialize &rArr; USART_Initialize &rArr; GPIO_AFConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>USART2_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART2_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_PowerControl &rArr; USART_PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[8a]"></a>USART2_Receive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usart_stm32f10x.o(i.USART2_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART2_Receive &rArr; USART_Receive &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>USART2_Send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usart_stm32f10x.o(i.USART2_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART2_Send &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>USART2_SetModemControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART2_SetModemControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_SetModemControl &rArr; USART_SetModemControl
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetModemControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>USART2_Transfer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usart_stm32f10x.o(i.USART2_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART2_Transfer &rArr; USART_Transfer &rArr; USART_Receive &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>USART2_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART2_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART2_Uninitialize &rArr; USART_Uninitialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>USART3_Control</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usart_stm32f10x.o(i.USART3_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART3_Control &rArr; USART_Control &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>USART3_GetCapabilities</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART3_GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART3_GetCapabilities
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetCapabilities
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>USART3_GetModemStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART3_GetModemStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART3_GetModemStatus &rArr; USART_GetModemStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetModemStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>USART3_GetRxCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART3_GetRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART3_GetRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetRxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>USART3_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART3_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART3_GetStatus &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>USART3_GetTxCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART3_GetTxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART3_GetTxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetTxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>USART3_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART3_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART3_Initialize &rArr; USART_Initialize &rArr; GPIO_AFConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>USART3_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART3_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_PowerControl &rArr; USART_PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[97]"></a>USART3_Receive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usart_stm32f10x.o(i.USART3_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART3_Receive &rArr; USART_Receive &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[96]"></a>USART3_Send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usart_stm32f10x.o(i.USART3_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART3_Send &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>USART3_SetModemControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART3_SetModemControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART3_SetModemControl &rArr; USART_SetModemControl
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetModemControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>USART3_Transfer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usart_stm32f10x.o(i.USART3_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART3_Transfer &rArr; USART_Transfer &rArr; USART_Receive &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>USART3_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART3_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART3_Uninitialize &rArr; USART_Uninitialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>USART4_Control</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usart_stm32f10x.o(i.USART4_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART4_Control &rArr; USART_Control &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>USART4_GetCapabilities</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART4_GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART4_GetCapabilities
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetCapabilities
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>USART4_GetModemStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART4_GetModemStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART4_GetModemStatus &rArr; USART_GetModemStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetModemStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>USART4_GetRxCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART4_GetRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART4_GetRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetRxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>USART4_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART4_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART4_GetStatus &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>USART4_GetTxCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART4_GetTxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART4_GetTxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetTxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>USART4_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART4_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART4_Initialize &rArr; USART_Initialize &rArr; GPIO_AFConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>USART4_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART4_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART4_PowerControl &rArr; USART_PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>USART4_Receive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usart_stm32f10x.o(i.USART4_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART4_Receive &rArr; USART_Receive &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>USART4_Send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usart_stm32f10x.o(i.USART4_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART4_Send &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>USART4_SetModemControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART4_SetModemControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART4_SetModemControl &rArr; USART_SetModemControl
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetModemControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>USART4_Transfer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usart_stm32f10x.o(i.USART4_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART4_Transfer &rArr; USART_Transfer &rArr; USART_Receive &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>USART4_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART4_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART4_Uninitialize &rArr; USART_Uninitialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>USART5_Control</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usart_stm32f10x.o(i.USART5_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART5_Control &rArr; USART_Control &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>USART5_GetCapabilities</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART5_GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART5_GetCapabilities
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetCapabilities
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>USART5_GetModemStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART5_GetModemStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART5_GetModemStatus &rArr; USART_GetModemStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetModemStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>USART5_GetRxCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART5_GetRxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART5_GetRxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetRxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>USART5_GetStatus</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART5_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART5_GetStatus &rArr; USART_GetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>USART5_GetTxCount</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART5_GetTxCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART5_GetTxCount
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetTxCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>USART5_Initialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART5_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USART5_Initialize &rArr; USART_Initialize &rArr; GPIO_AFConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>USART5_PowerControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART5_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART5_PowerControl &rArr; USART_PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>USART5_Receive</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usart_stm32f10x.o(i.USART5_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USART5_Receive &rArr; USART_Receive &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>USART5_Send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usart_stm32f10x.o(i.USART5_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART5_Send &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>USART5_SetModemControl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART5_SetModemControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART5_SetModemControl &rArr; USART_SetModemControl
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SetModemControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>USART5_Transfer</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, usart_stm32f10x.o(i.USART5_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USART5_Transfer &rArr; USART_Transfer &rArr; USART_Receive &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transfer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>USART5_Uninitialize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART5_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART5_Uninitialize &rArr; USART_Uninitialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Uninitialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>USART_Control</STRONG> (Thumb, 2082 bytes, Stack size 48 bytes, usart_stm32f10x.o(i.USART_Control))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART_Control &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Control
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Control
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Control
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Control
</UL>

<P><STRONG><a name="[103]"></a>USART_GetCapabilities</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usart_stm32f10x.o(i.USART_GetCapabilities))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_GetCapabilities
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_GetCapabilities
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_GetCapabilities
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_GetCapabilities
</UL>

<P><STRONG><a name="[104]"></a>USART_GetModemStatus</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, usart_stm32f10x.o(i.USART_GetModemStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetModemStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_GetModemStatus
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_GetModemStatus
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_GetModemStatus
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_GetModemStatus
</UL>

<P><STRONG><a name="[105]"></a>USART_GetRxCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart_stm32f10x.o(i.USART_GetRxCount))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_GetRxCount
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_GetRxCount
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_GetRxCount
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_GetRxCount
</UL>

<P><STRONG><a name="[106]"></a>USART_GetStatus</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, usart_stm32f10x.o(i.USART_GetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_GetStatus
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_GetStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_GetStatus
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_GetStatus
</UL>

<P><STRONG><a name="[107]"></a>USART_GetTxCount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usart_stm32f10x.o(i.USART_GetTxCount))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_GetTxCount
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_GetTxCount
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_GetTxCount
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_GetTxCount
</UL>

<P><STRONG><a name="[108]"></a>USART_Initialize</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, usart_stm32f10x.o(i.USART_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART_Initialize &rArr; GPIO_AFConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PortClock
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFConfigure
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Initialize
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Initialize
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Initialize
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Initialize
</UL>

<P><STRONG><a name="[110]"></a>USART_PeripheralReset</STRONG> (Thumb, 190 bytes, Stack size 0 bytes, usart_stm32f10x.o(i.USART_PeripheralReset))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PowerControl
</UL>

<P><STRONG><a name="[109]"></a>USART_PowerControl</STRONG> (Thumb, 520 bytes, Stack size 16 bytes, usart_stm32f10x.o(i.USART_PowerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_PowerControl
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_PeripheralReset
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_PowerControl
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_PowerControl
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_PowerControl
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_PowerControl
</UL>

<P><STRONG><a name="[10a]"></a>USART_Receive</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, usart_stm32f10x.o(i.USART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USART_Receive &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transfer
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Receive
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Receive
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Receive
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Receive
</UL>

<P><STRONG><a name="[10b]"></a>USART_Send</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, usart_stm32f10x.o(i.USART_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Transfer
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Send
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Send
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Send
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Send
</UL>

<P><STRONG><a name="[10c]"></a>USART_SetModemControl</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, usart_stm32f10x.o(i.USART_SetModemControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_SetModemControl
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_SetModemControl
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_SetModemControl
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_SetModemControl
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_SetModemControl
</UL>

<P><STRONG><a name="[10d]"></a>USART_Transfer</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, usart_stm32f10x.o(i.USART_Transfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USART_Transfer &rArr; USART_Receive &rArr; USART_Send &rArr;  USART_Receive (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Send
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Transfer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Transfer
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Transfer
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Transfer
</UL>

<P><STRONG><a name="[10e]"></a>USART_Uninitialize</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USART_Uninitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART_Uninitialize &rArr; GPIO_PinConfigure
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinConfigure
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFConfigure
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART5_Uninitialize
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART4_Uninitialize
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_Uninitialize
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_Uninitialize
</UL>

<P><STRONG><a name="[84]"></a>USARTx_GetVersion</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usart_stm32f10x.o(i.USARTx_GetVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USARTx_GetVersion
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart_stm32f10x.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[fc]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[15c]"></a>prvHeapInit</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvHeapInit
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[15d]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[4e]"></a>prvTaskExitError</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[142]"></a>prvCopyDataFromQueue</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, queue.o(i.prvCopyDataFromQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvCopyDataFromQueue
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueReceiveFromISR
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[144]"></a>prvCopyDataToQueue</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, queue.o(i.prvCopyDataToQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvCopyDataToQueue &rArr; xTaskPriorityDisinherit
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskPriorityDisinherit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSendFromISR
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[147]"></a>prvInitialiseNewQueue</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, queue.o(i.prvInitialiseNewQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReset
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreate
</UL>

<P><STRONG><a name="[14d]"></a>prvIsQueueEmpty</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
</UL>

<P><STRONG><a name="[14e]"></a>prvIsQueueFull</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, queue.o(i.prvIsQueueFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvIsQueueFull
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
</UL>

<P><STRONG><a name="[158]"></a>prvUnlockQueue</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, queue.o(i.prvUnlockQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvUnlockQueue &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskRemoveFromEventList
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskMissedYield
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericSend
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
</UL>

<P><STRONG><a name="[134]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventListRestricted
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskPlaceOnEventList
</UL>

<P><STRONG><a name="[138]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = prvAddNewTaskToReadyList &rArr; prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseTaskLists
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[13e]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[141]"></a>prvDeleteTCB</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[4f]"></a>prvIdleTask</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[149]"></a>prvInitialiseNewTask</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvInitialiseNewTask
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreateStatic
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[13a]"></a>prvInitialiseTaskLists</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, tasks.o(i.prvInitialiseTaskLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvInitialiseTaskLists
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[170]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[13c]"></a>prvCheckForValidListAndQueue</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, timers.o(i.prvCheckForValidListAndQueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = prvCheckForValidListAndQueue &rArr; xQueueGenericCreateStatic &rArr; prvInitialiseNewQueue &rArr; xQueueGenericReset &rArr; xTaskRemoveFromEventList
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericCreateStatic
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerCreateTimerTask
</UL>

<P><STRONG><a name="[157]"></a>prvGetNextExpireTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, timers.o(i.prvGetNextExpireTime))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[14c]"></a>prvInsertTimerInActiveList</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, timers.o(i.prvInsertTimerInActiveList))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prvInsertTimerInActiveList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>

<P><STRONG><a name="[14f]"></a>prvProcessExpiredTimer</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, timers.o(i.prvProcessExpiredTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = prvProcessExpiredTimer &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
</UL>

<P><STRONG><a name="[151]"></a>prvProcessReceivedCommands</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, timers.o(i.prvProcessReceivedCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xQueueGenericReceive
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertTimerInActiveList
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[153]"></a>prvProcessTimerOrBlockTask</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, timers.o(i.prvProcessTimerOrBlockTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = prvProcessTimerOrBlockTask &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vQueueWaitForMessageRestricted
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessExpiredTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTimerTask
</UL>

<P><STRONG><a name="[152]"></a>prvSampleTimeNow</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, timers.o(i.prvSampleTimeNow))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSwitchTimerLists
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
</UL>

<P><STRONG><a name="[156]"></a>prvSwitchTimerLists</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, timers.o(i.prvSwitchTimerLists))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTimerGenericCommand
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvSampleTimeNow
</UL>

<P><STRONG><a name="[50]"></a>prvTimerTask</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, timers.o(i.prvTimerTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = prvTimerTask &rArr; prvProcessReceivedCommands &rArr; prvSampleTimeNow &rArr; prvSwitchTimerLists &rArr; xTimerGenericCommand &rArr; xQueueGenericSend &rArr; vTaskPlaceOnEventList &rArr; prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessTimerOrBlockTask
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvProcessReceivedCommands
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvGetNextExpireTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timers.o(i.xTimerCreateTimerTask)
</UL>
<P><STRONG><a name="[112]"></a>_printf_core</STRONG> (Thumb, 658 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
